<?xml version='1.0'?>
<!DOCTYPE guide SYSTEM "../dtd/guide.dtd"
[
  <!ENTITY linearfp.c SYSTEM "../src_esc/linearfp.c.esc">
  <!ENTITY v86intr.c SYSTEM "../src_esc/v86intr.c.esc">
  <!ENTITY v86.c SYSTEM "../src_esc/v86.c.esc">
]>
<!-- $Id: v86.xml,v 1.2 2002/08/26 14:02:46 pavlovskii Exp $ -->

<guide link="v86">
<title>Virtual 8086 Mode</title>
<author>
<email link="tim@themoebius.org.uk">Tim Robinson</email>
<homepage>http://www.themoebius.org.uk/</homepage>
</author>
<date>$Date: 2002/08/26 14:02:46 $</date>
<version>$Revision: 1.2 $</version>
<copyright>last updated $Date: 2002/08/26 14:02:46 $</copyright>

<keywordset>
   <keyword>osdev</keyword>
   <keyword>Tim Robinson</keyword>
   <keyword>kernel</keyword>
   <keyword>virtual 8086</keyword>
   <keyword>v86</keyword>
   <keyword>vm86</keyword>
</keywordset>

<abstract>
Using the IA-32's virtual 8086 mode you can run real-mode code inside your protected-mode OS 
</abstract>

<chapter id="intro">
<title>Introduction</title>
<section>
<body>
<p>
With the Intel 80286 processor came protected mode. While this was a great 
improvement over the unprotected 8086, giving programmers the ability to 
separate code, data and stack, to limit the lengths of segments, and to move 
segments around in memory transparently, it was clear that Intel didn't have 
backwards compatibility in mind with the new mode. Firstly it was officially 
impossible to switch from protected back to real mode (although a clever IBM 
hack made this possible); secondly, protected mode was also incompatible with 
the vast amount of real-mode code around at the time.
</p>

<p>
Microsoft Windows/286 was one of the first programs to make use of protected 
mode on the 80286, providing some degree of hardware-assisted memory management 
and inter-application protection. However, Windows/286 still needed to run DOS 
programs, which, by their very nature, ran under real mode. So Windows/286 
'faked' multitasking between DOS and Windows applications by suspending Windows 
whenever a DOS program was in the foreground; it would have been far too slow 
to pre-emptively multitask DOS and Windows because this would have involved 
switching repeatedly between real and protected modes, something that the 286 
wasn't very good at.
</p>

<p>By the time they came to design the i386, the Intel designers realised that 
the old real-mode DOS programs weren't going to go away soon, and that they 
needed to design a feature into their new CPU which would allow real-mode code 
to co-exist with a protected mode OS. Thus <b>virtual 8086</b> mode was created.
</p>

<p>"So what?" you say. "I'm not going to run any DOS programs inside my OS."
OK, that's fair enough. But remember that DOS isn't the only real-mode code 
that you might want to run: more important to most people is the BIOS. Inside 
the BIOS is a set of custom device drivers for various custom hardware in your 
system: one example of this is the VESA BIOS, using which you can switch to 
high-resolution video modes and generally use graphics modes beyond 320x200x256 
or 640x480x16. So V86 mode is very handy for this (and if you don't believe me,
it's the same method used by SVGALib on Linux and various NT graphics drivers).
</p>
</body>
</section>
</chapter>

<chapter id="ch01">
<title>Virtual 8086 Mode</title>
<section>
<body>
<p>
As the name suggests, virtual 8086 mode (commonly shortened to VM86 or just V86 
mode) lets you run one or more virtual 8086 chips on the single processor. 
More accurately, you can run one or more virtual PC systems on one processor 
using a combination of multitasking (to emulate several processors) and 
virtualization of hardware (to emulate several sets of hardware).
</p>

<p>
In basic terms, the CPU is in virtual 8086 mode when the <c>VM</c> flag (bit 17) 
is set in the <c>EFLAGS</c> register. However, V86 mode requires some help from 
your kernel to keep running; more importantly, you can't just toggle 
<c>EFLAGS.VM</c> in the middle of your code and assume you're running in V86 
mode, as you can to enter protected mode.
</p>

<p>
Let's put the talk of flags aside for a moment. What makes V86 mode special is 
the following:
<ul>
<li><b>Addresses are formed in the real-mode way;</b> that is, using a segment and an 
offset. The segment registers <c>CS</c>, <c>DS</c>, <c>ES</c>, <c>FS</c>, 
<c>GS</c> and <c>SS</c> work as they do in real mode. Segments are limited to 
64KB and their base addresses are set with the segment registers. So...</li>
<li>...<b>segmentation is disabled</b> once you're in V86 mode. That is, the CPU 
ignores whatever funky base addresses you might have specifed in your GDT or 
LDT and addresses memory as if it were in real mode. However, paging is still 
in effect: the segment:offset addresses get translated to linear (i.e. paged)
and not physical (i.e. RAM) addresses. So...
</li>
<li>...the access rights that segments control are also discarded. <b>V86 code 
runs permanently in ring 3.</b> So...
</li>
<li>...the <b><c>IOPL</c></b> flags take effect. However...</li>
<li>...<b><c>IOPL</c> takes on a different meaning in V86 mode.</b> Instead of denying
or allowing port I/O, it instead allows or disallows V86 tasks to make changes
to the interrupt enable flag (<c>EFLAGS.IF</c>). This means that if 
<c>IOPL</c> &lt; 3, attempts to execute sensitive instructions (<c>CLI</c>, 
<c>STI</c>, <c>LOCK</c>, <c>PUSHF</c>, <c>POPF</c> and <c>IRET</c>) will
result in a general protection fault which will be handled in the kernel. This
is a good thing, because a V86 task changing the interrupt flag could 
potentially disallow actual hardware interrupts from reaching the 
protected-mode device drivers.</li>
<li><b>Port I/O is not <c>IOPL</c>-sensitive in V86 mode,</b> but is controlled by the
I/O permission bitmap in the TSS. You can disable I/O bitmap checking by 
setting the I/O map base to point beyond the limit of your TSS; in this case,
the CPU will generate a GPF for all ports. If you want to allow V86 code to
access ports without a GPF, you will need to extend the TSS by 8192 bytes
(enough for 65,536 ports with one bit per port), point the I/O map field to
the start of the bitmap, and set all the bits to zeroes.</li>
<!-- <li>Note that all interrupts from V86 mode trap to the kernel with a GPF. It 
is possible (using the partially-documented Pentium V86 Mode Extensions) to 
get the CPU to trap directly to the relevant real-mode handler, but that's 
unfortunately beyond the scope of this tutorial.</li> -->
<li>Note that the <c>INT</c> instruction is <c>IOPL</c>-sensitive in V86 mode,
although if <c>IOPL</c> = 3, the CPU ignores the real-mode interrupt vector 
table and always uses the IDT instead. Again, if <c>IOPL</c> &lt; 3, software 
interrupts trigger a GPF which can be handled by the kernel.</li>
</ul>
</p>

<p>We can see from this that V86 mode is more similar in some ways (address 
formation) to real mode, and in others (protection) to protected mode. You can 
also guess that we'll need some kernel support to keep V86 mode going, although 
you don't really need to write too much code to get, say, the video BIOS running.
A downside to using V86 mode is speed: every IOPL-sensitive instruction will 
cause the CPU to trap to kernel mode, as will I/O to ports which are masked 
out in the TSS.
</p>
</body>
</section>
</chapter>

<chapter id="ch02">
<title>Switching to V86 Mode</title>
<section>
<body>
<p>
Hopefully now I've sold you on why you'd want to start using V86 mode and what it 
can do. Let's see what's involved in getting some simple code to run. As I 
mentioned before, the CPU enters V86 mode when <c>EFLAGS.VM</c> is set; however, 
you can't toggle this flag in the middle of an instruction stream. The best way 
I've found to do it is from a kernel-to-user interrupt return; in fact, you'll 
find that if you've already got some ring 0 interrupt handlers in place,
the switches to and from V86 mode (remember the processor switches out of
V86 mode for interrupts) fit in nicely. This is by design.
</p>

<p>
Recall that the <c>IRET</c> instruction pops <c>EFLAGS</c> off the stack, so 
the first thing you'll need to do is set the <c>VM</c> bit in the <c>EFLAGS</c>
image you've got on the stack (i.e. the copy of <c>EFLAGS</c> that the CPU 
pushed there when it entered ring 0 in the first place). I'm assuming here that 
you've already got enough multitasking implemented that you can switch reliably 
between ring 3 and ring 0 (and back again) and keep track of the ring 3 stuff 
on the stack once you're in ring 0. Apart from the obvious flag difference, 
the other differences to a normal ring 3 stack image are:
<ul>
<li><c>CS</c> and <c>SS</c> are 16-bit segment registers, although they're widened to 32 
bits when the CPU pushes them onto the stack</li>
<li><c>EIP</c> is actually <c>IP</c>; that is, only the bottom 16 bits are significant.
Again, it's widened when it get pushed. The same applies to <c>ES</c>P.</li>
<li>The CPU pops <c>DS</c>, <c>ES</c>, <c>FS</c> and <c>GS</c> on an IRET to V86 mode; in memory,
they're actually stored in the order <c>ES</c>, <c>DS</c>, <c>FS</c>, <c>GS</c> (with <c>ES</c> at the lower 
address and <c>GS</c> at the higher address). This is to allow kernel code to 
modify the values of the segment registers; of course, any pops to these 
registers while still in ring 0 will load them with protected mode values;
any attempts to load them with real-mode values (which are needed by the 
real mode code) will probably result in a fault. These are also 16 bits 
widened to 32.</li>
</ul>
We can see from this that you don't shouldn't need to make any changes to 
the ring 0 interrupt entry/exit code; you still need to push and pop all the 
general-purpose registers (the CPU doesn't handle these specially in V86 mode), 
and you can carry on pushing and popping the segment registers, although the 
values you give them won't have any effect once you're in V86 mode.
</p>

<p>
In fact, setting up a V86 stack frame is the same as setting up a normal ring 3 
stack frame, except for the extra 4 segment registers at the end and the <c>VM</c>
bit set in <c>EFLAGS</c>.
</p>
</body>
</section>
</chapter>

<chapter id="ch03">
<title>Memory</title>
<section>
<body>
<p>
Although we know how to switch to V86 mode, we need somewhere for our code to 
run. Specifically we need somewhere for code and data to go, and somewhere to use 
as a stack. For reasons which are hopefully obvious (i.e. real mode code can't 
access beyond the first megabyte), code, data and stack all need to go in the 
first megabyte. You need to make sure that you've got some space free there;
space, that is, in the first megabyte of your virtual address space -- by the 
wonder of paging, it can be located anywhere in physical memory. I'll leave 
that to you to sort out because your memory layout depends on the way you're 
managing it. Suffice to say that if you've chosen to put your kernel in the 
bottom half and your applications in the top half, you're stuck (unless you 
re-map the first megabyte so that it's accessible to ring 3 and make sure 
there's nothing important there). If you're planning on calling the BIOS you'll 
also need to make sure that the BIOS area <c>A0000</c> to <c>FFFFF</c> is mapped correctly;
for a simple V86 monitor you can map the whole area straight to physical memory 
and make it read-write. If you want to get clever you might think about 
making it copy-on-write, so that each task gets its own copy of the video buffer.
If it uses the BIOS, your code will also need the interrupt vector table and 
BIOS data area from address <c>0</c> to <c>500</c>. If your boot loader or kernel wrote over 
the IVT and BDA you are also stuck; if so, you will need to modify them so as 
to preseve that memory. Again, you could make the bottom 500 bytes 
copy-on-write so that each task got its own IVT and BDA; however, for now it 
should be enough to map the first page to address zero and make it read-write.
</p>

<p>
Once you've got some area clear in the first megabyte and mapped the BIOS 
correctly you need to decide on the correct values for <c>CS:IP</c> and <c>SS:SP</c>. 
Remember that every linear address can be described by many segment:offset 
pairs. Here's some code I use to go from a 32-bit linear address to a 
segment:offset pair (plus a few handy macros). Note that this code only works 
(reliably) for memory aligned to page boundaries; it could probably be 
improved.</p>

<p>
<pre link="src/linearfp.c">
&linearfp.c;
</pre>
</p>

<p>
Depending on what code you intend to run in your virtual 8086 machine, you 
will need up to three memory areas: code, data and stack. For now it should be 
enough to emulate simple .COM programs, where code and data are contained 
within one 64KB segment. Although for the moment you should write your own 
real-mode code to test this with (for tasks like using the BIOS to change video 
modes), there are a few things to consider if you want to emulate the real-mode 
environment fully. One consideration is that DOS programs often assume that 
they have full ownership of the bottom megabyte of memory, so you may have to 
be prepared to allow them to read and write anywhere there. Another is that 
.COM programs are linked to start at offset <c>100h</c> within their segment, so unless 
you want to write all your programs to run otherwise, you should try and 
emulate this. A simple way is to allocate 256 bytes more than you need to, 
put the contents of the program 256 bytes from the start of the buffer, and 
run it from there. You could even go so far as emulating a DOS PSP (Program 
Segment Prefix) and pass a command line there; real DOS puts an <c>INT 20h</c>
instruction at the start of the PSP, and a zero word at the top of the initial 
stack, which means that when programs do a RET instruction they hit the 
interrupt and get terminated automatically. You don't have to emulate DOS 
to this extent, but it's a handy way of exiting V86 programs.
</p>

</body>
</section>
</chapter>

<chapter id="ch04">
<title>Writing and Running Virtual 8086 Code</title>
<section>
<body>
<p>
Now we're able to switch to protected mode, and have something there to run. 
The question now is: what can we run? The answer to this is, as much as you're 
prepared to write kernel support for. I'll go into this in more detail later 
on; at the moment it should be possible to run simple sequences of instructions 
(i.e. code that doesn't use any of the IOPL-sensitive instructions I mentioned 
earlier). For now, let's stick to some simple 16-bit assembly code; something 
like this NASM listing.
</p>

<p><pre>
[bits 16]
[section .text]

mov ax, 1234h 
int 3 
</pre></p>

<p>
This code will load a distinctive value into the bottom half of <c>EAX</c>, then 
trigger a breakpoint, which I'm assuming your kernel will handle and provide 
a register dump (where we'll see the <c>0x1234</c> value clearly). Once 
you've assembled this (as flat binary), you need to have your kernel load it 
into the memory block it allocated before, and set up the ring 3 stack frame 
to continue in Virtual 8086 mode at the CS:IP of the start of the code. If 
all is well, once the CPU returns to user mode, it will see the <c>VM</c> bit 
set and switch to V86 mode, then load <c>AX</c> and immediately switch back to 
kernel mode to handle the breakpoint (actually as a GPF, as we'll see below). 
The stack frame now will be the same as it was when it was initially, except 
that, with a bit of luck, <c>EAX</c> will hold the value <c>0x1234</c> in its 
bottom half.
</p>

<p>
Although the fact that your 32-bit protected mode kernel can run the 16-bit 
real mode code above is impressive, the code itself doesn't really do much.
Let's make it more useful by having it call the BIOS and switch video modes.
</p>

<p><pre>
[bits 16]
[section .text]

mov ax, 0013h
int 10h
int 3
</pre></p>

<p>
This program will switch to 320x200x8 graphics mode then exit; we don't 
necessarily need to use the <c>INT 3</c> breakpoint instruction to exit, but
it's as good a way as any. Note that it's more straightforward to program
the video card directly if you want to switch to 320x200x8 mode, although once
this code works it should be easy to extend it to VESA modes later.
</p>

<p>
If you try running this code in your V86 monitor you will find that it crashes
immediately, with a GPF (interrupt 13h), on the <c>INT 10h</c> instruction. 
Your kernel needs to handle interrupts by:

<ul>
<li>Checking the byte at <c>CS:IP</c> (you'll need to convert <c>CS:IP</c> to
a linear address for this, using the <c>FP_TO_LINEAR</c> macro above) to see
whether a <c>0xCD</c> (<c>INT</c>) opcode caused the fault.</li>
<li>Putting the new <c>IP</c>, <c>CS</c> and <c>FLAGS</c> registers on the
user-mode stack. The new <c>IP</c> is the value of <c>IP</c> after the 
interrupt has returned, i.e. two bytes after the current value. Remember that 
<c>IP</c> is the bottom 16 bits of <c>EIP</c>, so you need to do some bit 
twiddling to make sure you're updating the right part (or make a union which
allows you to manipulate the two halves of a 32-bit register 
automatically). You need to notionally clear the <c>EFLAGS.IF</c> bit,
although if you clear the <i>real</i> <c>IF</c> bit, the machine will stop
multitasking. I'll come onto the role of the virtual <c>IF</c> bit later.</li>
<li>Decrementing the user-mode value of <c>SP</c> by 6 bytes. Again, remember
to only update the bottom 16 bits of <c>ESP</c> for this.</li>
<li>Redirecting <c>CS:IP</c> to the new interrupt handler. The new address can
be obtained using the real-mode interrupt vector table at address <c>0</c> 
(zero). The IVT is, in effect, an array of 256 far pointers (segment:offset
pairs); in each element, the offset occupies the first word, and the segment
the second.</li>
</ul>

Here's some code to do all that.
</p>

<p>
<pre link="src/v86intr.c">
&v86intr.c;
</pre>
</p>

<p>
If you now try this handler in your kernel, and it succeeds in vectoring the 
code to the BIOS interrupt handler, you will find that it faults again, and 
not on an interrupt. This time it will be another IOPL-sensitive instruction,
each of which must be handled by the kernel. It's fairly straightforward to
handle each of these, and you can add them to the <c>switch (ip[0])</c> along
with the interrupt code. In short, here's what you need to do for each 
instruction (you'll need to look up the instruction encodings in the Intel 
manuals; the NASM documentation also provides a handy reference).
<ul>
<li><c>CLI</c>: clear the task's virtual interrupt enable flag</li>
<li><c>STI</c>: set the task's VIF</li>
<li><c>PUSHF</c>: push the bottom 16 bits of <c>EFLAGS</c> onto the user 
stack. If the VIF is set, set the <c>IF</c> bit in the word you pushed; 
otherwise clear it.</li>
<li><c>POPF</c>: pop a word off the stack, set the <c>IF</c> bit, and load it 
into the bottom 16 bits of the task's <c>EFLAGS</c>. Set the VIF according to 
the state of <c>IF</c> in the flags word on the stack.</li>
<li><c>IRET</c>: do the reverse of the <c>INT</c> instruction: pop the flags 
off the stack in the same way as <c>POPF</c> does and branch to the 
<c>CS:IP</c> you popped off the stack.</li>
<li>various forms of <c>IN</c>: read a byte/word/dword from a port</li>
<li>various forms of <c>OUT</c>: write a byte/word/dword to a port</li>
<li>various forms of <c>INS</c> and <c>OUTS</c>: like IN and OUT but 
incrementing or decrementing <c>[E]SI</c> and <c>[E]CX</c></li>
</ul>
</p>

<p>
You will need to handle the <c>REP</c> (repeat), <c>A32</c> (32-bit address)
and <c>O32</c> (32-bit operand) prefixes too, where appropriate. The virtual 
interrupt enable flag which I just mentioned maintains the state of the 
interrupt flag as the V86 task sees it; of course the kernel should have full 
control over the real <c>IF</c> so as not to affect multitasking and hardware 
access. The VIF is more important if you start vectoring hardware 
interrupts to a V86 task (if it thinks interrupts are disabled then don't 
dispatch any).
</p>

<p>
Listed below is the full V86 GPF handler from The M&ouml;bius... have fun!
</p>

<pre link="src/v86.c">
&v86.c;
</pre>

</body>
</section>
</chapter>

<chapter id="overview">
<title>Overview</title>
<section>
<body>
<p>
Virtual 8086 mode provides a handy way of running 16-bit real mode code under 
a 32-bit OS. It may seem a bit of a hack on top of normal protected mode, but
it was designed to be easy and non-disruptive to add to an existing kernel.
</p>
</body>
</section>
</chapter>

</guide>
